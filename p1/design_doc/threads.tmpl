            +--------------------+
            |        CS 140      |
            | PROJECT 1: THREADS |
            |   DESIGN DOCUMENT  |
            +--------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Cunhan You <youch@shanghaitech.edu.cn>
Junda Shen <shenjd@shanghaitech.edu.cn>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

                 ALARM CLOCK
                 ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

New declaration:
  In thread.h:
  struct thread
    {
      /* The rest ticks the thread should be waken up*/
      int64_t ticks_wake;
    };

  In timer.c
  static struct list waiting_threads; /*The sleeping processes*/

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

1.Disable interrupt.
2.Set the ticks_wake of the current thread and insert it into waiting_threads by its ticks_wake.
3.Block the current thread.(will be checked and waken by the timer interrupt handler later)
4.Restore interrupt.

The timer interrupt handler will check and wake the current thread if the ticks_wake is 0(i.e Time's up)

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

Check the thread->ticks_wake in the ticks_wake every tick.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

Just block the current thread.

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

Disable interrupt operation when set the ticks_wake of the current thread.

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

It is very simple for me to implement.

             PRIORITY SCHEDULING
             ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

New declaration:
struct thread
  {
    /* Base priority. */
    int base_priority;

    /* Locks that the thread is holding. */
    struct list locks;

    /* The lock blocking the thread. */  
    struct lock *lock_waiting;
  };

struct lock 
  {
    /* List element for priority donation, used to construct the list of lock later. */
    struct list_elem elem;
    
    /* Max priority among the threads acquiring the lock. */
    int max_priority;
  };

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

1. When a thread acquires a lock, if the priority of the thread owning the lock is lower than itself, it will raise its priority. If the lock is still locked by other locks, it will donate the priority recursively, and then recover the priority under the logic of non donation after the thread releases the lock.

2. If a thread is donated by multiple threads, maintain the current priority as the maximum value of the donation priorit——max_priority (at the time of acquire and release).

3. When setting the priority of a thread, if the thread is in the donated state, set original priority——base_priority. Then, if the priority set is greater than the current priority, the current priority will be changed. Otherwise, original priority will be restored when the donation status is cancelled.

4. When releasing a lock changes the priority of a lock, the remaining donated priority and the current priority should be considered.

+---------------+             +---------------+             +---------------+             +---------------+
|    Thread1    |   donate    |    Thread2    |   donate    |    Thread3    |   donate    |    Thread2    |   donate    
|               | ——————————> |  lock1 holder | ——————————> |  lock2 holder | ——————————> |  lock3 holder | ——————————> ...
| acquire lock1 |             |   wait lock2  |             |   wait lock3  |             |   wait lock4  |
+---------------+             +---------------+             +---------------+             +---------------+
is acquiring lock1


---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

Operate the ready_list as a priority queue (i.e. Use list_insert_ordered when inserting new threads by its priority).

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

1. Recursively donate the priority before sema_down——solve nested donation problem:
  thread_donate_priority (lock);

2. sema_down:
  sema_down (&lock->semaphore);

3. disable interrupt and hold the lock
  enum intr_level old_level = intr_disable ();
  if (!thread_mlfqs)
    thread_hold_the_lock (lock);
  
  lock->holder = thread_current ();

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

1. Remove the lock from the current thread.
  thread_remove_lock (lock);
  lock->holder = NULL;

  Details of thread_remove_lock:
    Disable interrupt, the remove the lock and update priority.
    void thread_remove_lock (struct lock *lock)
    {
      enum intr_level old_level = intr_disable ();
      list_remove (&lock->elem);
      thread_update_priority (thread_current ());
      intr_set_level (old_level);
    }

2. sema_up
  sema_up (&lock->semaphore);

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

Call thread_yield to immediately reconsider the execution order of all threads and rearrange the execution order after setting the priority.

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

Sorry, I can't think of another way to implement it.

              ADVANCED SCHEDULER
              ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

New declaration:
  struct thread
    {
      /* nice value for the thread */
      int nice;

      /* estimate of the CPU time the thread has used recently */
      int64_t recent_cpu;
    };

  In fixed-point.h:
  /* To make fixed_point_t stand for int */
  typedef int fixed_point_t;

  In thread.c:
  /* Global variable used for system-wise load average */
  fixed_point_t load_avg;

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0      0   0   0   63  61  59    A
 4      4   0   0   62  61  59    A
 8      8   0   0   61  61  59    B
12      8   4   0   61  60  59    A
16     12   4   0   60  60  59    B
20     12   8   0   60  59  59    A
24     16   8   0   59  59  59    C
28     16   8   4   59  59  58    B
32     16  12   4   59  58  58    A
36     20  12   4   58  58  58    C

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

Yes. There's no specification for situations that multiple threads have
the same priority. Our method chooses the thread that has the longest time
not being run, which matches the behavior of our scheduler because of 
the thread_cmp_priority function we implemented.

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

The decisions like whether increase recent_cpu, update load_avg or update 
priority are made inside the interrupt context, but the actual behavior 
for those functions are realized outside the interrupt context. In fact, 
those code resides in threads.c and has better connection with the struct 
thread.

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

This design follows the specification carefully which is exactly its 
advantage, however, we had to admit, some algorithms implemented for 
this design is too simple and might not be realistic for large OS. 
Maybe algorithms should be improved if more time is given.

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

Macros can be interpreted effeciently and they are usually highlighted 
by some modern IDE, thus writting them provides more convenience. Besides, 
using macros alleviates another c file and the source tree seems more clear.

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
